{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["customStyles","content","top","left","right","bottom","marginRight","transform","width","App","props","state","passwords","firstname","lastname","email","school","showModal","initClient","window","gapi","client","init","putDataToDB","params","spreadsheetId","range","valueInputOption","insertDataOption","sheets","spreadsheets","values","append","then","response","console","log","result","reason","error","message","setState","bind","closeModal","load","this","className","style","opacity","type","onChange","e","target","value","placeholder","onClick","isOpen","contentLabel","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6a6aaa88.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Modal from 'react-modal';\nimport './App.css';\nconst sheet_id = '1EkQIXovVwYOXTEwuEipLqpsJVbiOABkODXLPFzy2Bwc';\nconst api_key = 'AIzaSyDBUcfLpQamg6y1DcI4yDe8EOJaFqsDors';\nconst client_id = '852363651846-a2rr5mds2ah70jv9qkuqimkoic9s8cmf.apps.googleusercontent.com';\nconst scope = 'https://www.googleapis.com/auth/spreadsheets';\n\nconst customStyles = {\n  content : {\n    top                   : '50%',\n    left                  : '48%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)',\n    width : '250px'\n  }\n};\n\nclass App extends Component {\n  state = {\n    passwords: [],\n    firstname: null,\n    lastname: null,\n    email: null,\n    school: null,\n    showModal: false\n  }\n\n  constructor(props) {\n    super(props);\n    this.putDataToDB = this.putDataToDB.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  componentDidMount() {\n      window.gapi.load('client', this.initClient);\n  }\n\n  initClient = () => {\n      window.gapi.client.init({\n          'apiKey': api_key,\n          'clientId': client_id,\n          'scope': scope,\n          'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n      });\n  }\n\n  putDataToDB = () => {\n      const params = {\n          spreadsheetId: sheet_id,\n          range: 'Sheet1',\n          valueInputOption: 'RAW',\n          insertDataOption: 'INSERT_ROWS'\n      };\n\n      const values = {\n          'majorDimension': 'ROWS',\n          'values': [\"test\"]\n      };\n\n      let request = window.gapi.client.sheets.spreadsheets.values.append(params, values);\n      request.then(function (response) {\n          console.log(response.result);\n      }, function (reason) {\n          console.error('error: ' + reason.result.error.message);\n    });\n      this.setState({\n        showModal: true,\n        firstname: '',\n        lastname: '',\n        email: '',\n        school: '',\n      });\n  };\n\n  closeModal () {\n    this.setState({ showModal: false });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div className=\"title\">\n          <h2> TalentBridger </h2>\n        </div>\n        <div className=\"grid\">\n          <div className=\"grid1\">\n            <h1> Start Your Recruiting Journey </h1>\n            <h5 style={{ opacity: '80%' }}> with 3 easy steps on our platform. </h5>\n            <h3> 1. Play a few quick games. </h3>\n            <h4 style={{ opacity: '80%' }}> Time for you to show off your soft skills. </h4>\n            <h3> 2. Apply to companies. </h3>\n            <h4 style={{ opacity: '80%' }}> Search for different roles and companies. </h4>\n            <h3> 3. Keep the momentum going! </h3>\n            <h4 style={{ opacity: '80%' }}> Stay connected to companies while you wait. </h4>\n          </div>\n          <div className=\"grid2\" style={{ opacity: '90%' }}>\n            <h3> Interested?</h3>\n            <h4 style={{ opacity: '70%' }}> Sign up here to be on the waiting list for the latest updates! If you have any questions or feedback, please contact us at talentbridger@gmail.com.</h4>\n            <input\n                type=\"text\"\n                onChange={(e) => this.setState({ firstname: e.target.value })}\n                placeholder=\"First Name\"\n                value={this.state.firstname}\n            />\n            <input\n                type=\"text\"\n                onChange={(e) => this.setState({ lastname: e.target.value })}\n                placeholder=\"Last Name\"\n                value={this.state.lastname}\n            />\n            <input\n                type=\"text\"\n                onChange={(e) => this.setState({ email: e.target.value })}\n                placeholder=\"Email\"\n                value={this.state.email}\n            />\n            <input\n                type=\"text\"\n                onChange={(e) => this.setState({ school: e.target.value })}\n                placeholder=\"School\"\n                value={this.state.school}\n            />\n            <button onClick={() => this.putDataToDB(this.state.message)}>\n              Sign Up\n            </button>\n            <Modal\n              isOpen={this.state.showModal}\n              contentLabel=\"Minimal Modal Example\"\n              style={customStyles}\n            >\n              <div className=\"modal\">\n                <h3 style={{ opacity: '80%' }}> Thank you for your interest! We will try to get back to you as soon as possible.</h3>\n              <button onClick={this.closeModal}>Close</button>\n              </div>\n            </Modal>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}